{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport LegacySandbox from './legacy/sandbox';\nimport { patchAtBootstrapping, patchAtMounting } from './patchers';\nimport ProxySandbox from './proxySandbox';\nimport SnapshotSandbox from './snapshotSandbox';\nexport { getCurrentRunningApp } from './common';\nexport { css } from './patchers';\n/**\n * 生成应用运行时沙箱\n *\n * 沙箱分两个类型：\n * 1. app 环境沙箱\n *  app 环境沙箱是指应用初始化过之后，应用会在什么样的上下文环境运行。每个应用的环境沙箱只会初始化一次，因为子应用只会触发一次 bootstrap 。\n *  子应用在切换时，实际上切换的是 app 环境沙箱。\n * 2. render 沙箱\n *  子应用在 app mount 开始前生成好的的沙箱。每次子应用切换过后，render 沙箱都会重现初始化。\n *\n * 这么设计的目的是为了保证每个子应用切换回来之后，还能运行在应用 bootstrap 之后的环境下。\n *\n * @param appName\n * @param elementGetter\n * @param scopedCSS\n * @param useLooseSandbox\n * @param excludeAssetFilter\n * @param globalContext\n * @param speedySandBox\n */\nexport function createSandboxContainer(appName, elementGetter, scopedCSS, useLooseSandbox, excludeAssetFilter, globalContext, speedySandBox) {\n  var sandbox;\n  if (window.Proxy) {\n    sandbox = useLooseSandbox ? new LegacySandbox(appName, globalContext) : new ProxySandbox(appName, globalContext, {\n      speedy: !!speedySandBox\n    });\n  } else {\n    sandbox = new SnapshotSandbox(appName);\n  }\n  // some side effect could be invoked while bootstrapping, such as dynamic stylesheet injection with style-loader, especially during the development phase\n  var bootstrappingFreers = patchAtBootstrapping(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox);\n  // mounting freers are one-off and should be re-init at every mounting time\n  var mountingFreers = [];\n  var sideEffectsRebuilders = [];\n  return {\n    instance: sandbox,\n    /**\n     * 沙箱被 mount\n     * 可能是从 bootstrap 状态进入的 mount\n     * 也可能是从 unmount 之后再次唤醒进入 mount\n     */\n    mount: function mount() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var sideEffectsRebuildersAtBootstrapping, sideEffectsRebuildersAtMounting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              /* ------------------------------------------ 因为有上下文依赖（window），以下代码执行顺序不能变 ------------------------------------------ */\n              /* ------------------------------------------ 1. 启动/恢复 沙箱------------------------------------------ */\n              sandbox.active();\n              sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(0, bootstrappingFreers.length);\n              sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length); // must rebuild the side effects which added at bootstrapping firstly to recovery to nature state\n              if (sideEffectsRebuildersAtBootstrapping.length) {\n                sideEffectsRebuildersAtBootstrapping.forEach(function (rebuild) {\n                  return rebuild();\n                });\n              }\n              /* ------------------------------------------ 2. 开启全局变量补丁 ------------------------------------------*/\n              // render 沙箱启动时开始劫持各类全局监听，尽量不要在应用初始化阶段有 事件监听/定时器 等副作用\n              mountingFreers = patchAtMounting(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox);\n              /* ------------------------------------------ 3. 重置一些初始化时的副作用 ------------------------------------------*/\n              // 存在 rebuilder 则表明有些副作用需要重建\n              if (sideEffectsRebuildersAtMounting.length) {\n                sideEffectsRebuildersAtMounting.forEach(function (rebuild) {\n                  return rebuild();\n                });\n              }\n              // clean up rebuilders\n              sideEffectsRebuilders = [];\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    /**\n     * 恢复 global 状态，使其能回到应用加载之前的状态\n     */\n    unmount: function unmount() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // record the rebuilders of window side effects (event listeners or timers)\n              // note that the frees of mounting phase are one-off as it will be re-init at next mounting\n              sideEffectsRebuilders = [].concat(_toConsumableArray(bootstrappingFreers), _toConsumableArray(mountingFreers)).map(function (free) {\n                return free();\n              });\n              sandbox.inactive();\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  };\n}","map":{"version":3,"names":["_toConsumableArray","_asyncToGenerator","_regeneratorRuntime","LegacySandbox","patchAtBootstrapping","patchAtMounting","ProxySandbox","SnapshotSandbox","getCurrentRunningApp","css","createSandboxContainer","appName","elementGetter","scopedCSS","useLooseSandbox","excludeAssetFilter","globalContext","speedySandBox","sandbox","window","Proxy","speedy","bootstrappingFreers","mountingFreers","sideEffectsRebuilders","instance","mount","mark","_callee","sideEffectsRebuildersAtBootstrapping","sideEffectsRebuildersAtMounting","wrap","_callee$","_context","prev","next","active","slice","length","forEach","rebuild","stop","unmount","_callee2","_callee2$","_context2","concat","map","free","inactive"],"sources":["/home/lishu/桌面/Micro_frontend_practice/qiankun_micro/qiankun-base/node_modules/qiankun/es/sandbox/index.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport LegacySandbox from './legacy/sandbox';\nimport { patchAtBootstrapping, patchAtMounting } from './patchers';\nimport ProxySandbox from './proxySandbox';\nimport SnapshotSandbox from './snapshotSandbox';\nexport { getCurrentRunningApp } from './common';\nexport { css } from './patchers';\n/**\n * 生成应用运行时沙箱\n *\n * 沙箱分两个类型：\n * 1. app 环境沙箱\n *  app 环境沙箱是指应用初始化过之后，应用会在什么样的上下文环境运行。每个应用的环境沙箱只会初始化一次，因为子应用只会触发一次 bootstrap 。\n *  子应用在切换时，实际上切换的是 app 环境沙箱。\n * 2. render 沙箱\n *  子应用在 app mount 开始前生成好的的沙箱。每次子应用切换过后，render 沙箱都会重现初始化。\n *\n * 这么设计的目的是为了保证每个子应用切换回来之后，还能运行在应用 bootstrap 之后的环境下。\n *\n * @param appName\n * @param elementGetter\n * @param scopedCSS\n * @param useLooseSandbox\n * @param excludeAssetFilter\n * @param globalContext\n * @param speedySandBox\n */\nexport function createSandboxContainer(appName, elementGetter, scopedCSS, useLooseSandbox, excludeAssetFilter, globalContext, speedySandBox) {\n  var sandbox;\n  if (window.Proxy) {\n    sandbox = useLooseSandbox ? new LegacySandbox(appName, globalContext) : new ProxySandbox(appName, globalContext, {\n      speedy: !!speedySandBox\n    });\n  } else {\n    sandbox = new SnapshotSandbox(appName);\n  }\n  // some side effect could be invoked while bootstrapping, such as dynamic stylesheet injection with style-loader, especially during the development phase\n  var bootstrappingFreers = patchAtBootstrapping(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox);\n  // mounting freers are one-off and should be re-init at every mounting time\n  var mountingFreers = [];\n  var sideEffectsRebuilders = [];\n  return {\n    instance: sandbox,\n    /**\n     * 沙箱被 mount\n     * 可能是从 bootstrap 状态进入的 mount\n     * 也可能是从 unmount 之后再次唤醒进入 mount\n     */\n    mount: function mount() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var sideEffectsRebuildersAtBootstrapping, sideEffectsRebuildersAtMounting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              /* ------------------------------------------ 因为有上下文依赖（window），以下代码执行顺序不能变 ------------------------------------------ */\n              /* ------------------------------------------ 1. 启动/恢复 沙箱------------------------------------------ */\n              sandbox.active();\n              sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(0, bootstrappingFreers.length);\n              sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length); // must rebuild the side effects which added at bootstrapping firstly to recovery to nature state\n              if (sideEffectsRebuildersAtBootstrapping.length) {\n                sideEffectsRebuildersAtBootstrapping.forEach(function (rebuild) {\n                  return rebuild();\n                });\n              }\n              /* ------------------------------------------ 2. 开启全局变量补丁 ------------------------------------------*/\n              // render 沙箱启动时开始劫持各类全局监听，尽量不要在应用初始化阶段有 事件监听/定时器 等副作用\n              mountingFreers = patchAtMounting(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter, speedySandBox);\n              /* ------------------------------------------ 3. 重置一些初始化时的副作用 ------------------------------------------*/\n              // 存在 rebuilder 则表明有些副作用需要重建\n              if (sideEffectsRebuildersAtMounting.length) {\n                sideEffectsRebuildersAtMounting.forEach(function (rebuild) {\n                  return rebuild();\n                });\n              }\n              // clean up rebuilders\n              sideEffectsRebuilders = [];\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    /**\n     * 恢复 global 状态，使其能回到应用加载之前的状态\n     */\n    unmount: function unmount() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // record the rebuilders of window side effects (event listeners or timers)\n              // note that the frees of mounting phase are one-off as it will be re-init at next mounting\n              sideEffectsRebuilders = [].concat(_toConsumableArray(bootstrappingFreers), _toConsumableArray(mountingFreers)).map(function (free) {\n                return free();\n              });\n              sandbox.inactive();\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}