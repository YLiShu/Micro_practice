{"ast":null,"code":"import _isFunction from \"lodash/isFunction\";\nimport _noop from \"lodash/noop\";\n/**\n * @author Kuitos\n * @since 2019-04-11\n */\nexport default function patch() {\n  // FIXME umi unmount feature request\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var rawHistoryListen = function rawHistoryListen(_) {\n    return _noop;\n  };\n  var historyListeners = [];\n  var historyUnListens = [];\n  if (window.g_history && _isFunction(window.g_history.listen)) {\n    rawHistoryListen = window.g_history.listen.bind(window.g_history);\n    window.g_history.listen = function (listener) {\n      historyListeners.push(listener);\n      var unListen = rawHistoryListen(listener);\n      historyUnListens.push(unListen);\n      return function () {\n        unListen();\n        historyUnListens.splice(historyUnListens.indexOf(unListen), 1);\n        historyListeners.splice(historyListeners.indexOf(listener), 1);\n      };\n    };\n  }\n  return function free() {\n    var rebuild = _noop;\n    /*\n     还存在余量 listener 表明未被卸载，存在两种情况\n     1. 应用在 unmout 时未正确卸载 listener\n     2. listener 是应用 mount 之前绑定的，\n     第二种情况下应用在下次 mount 之前需重新绑定该 listener\n     */\n    if (historyListeners.length) {\n      rebuild = function rebuild() {\n        // 必须使用 window.g_history.listen 的方式重新绑定 listener，从而能保证 rebuild 这部分也能被捕获到，否则在应用卸载后无法正确的移除这部分副作用\n        historyListeners.forEach(function (listener) {\n          return window.g_history.listen(listener);\n        });\n      };\n    }\n    // 卸载余下的 listener\n    historyUnListens.forEach(function (unListen) {\n      return unListen();\n    });\n    // restore\n    if (window.g_history && _isFunction(window.g_history.listen)) {\n      window.g_history.listen = rawHistoryListen;\n    }\n    return rebuild;\n  };\n}","map":{"version":3,"names":["_isFunction","_noop","patch","rawHistoryListen","_","historyListeners","historyUnListens","window","g_history","listen","bind","listener","push","unListen","splice","indexOf","free","rebuild","length","forEach"],"sources":["/home/lishu/桌面/Micro_frontend_practice/qiankun_micro/qiankun-base/node_modules/qiankun/es/sandbox/patchers/historyListener.js"],"sourcesContent":["import _isFunction from \"lodash/isFunction\";\nimport _noop from \"lodash/noop\";\n/**\n * @author Kuitos\n * @since 2019-04-11\n */\nexport default function patch() {\n  // FIXME umi unmount feature request\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var rawHistoryListen = function rawHistoryListen(_) {\n    return _noop;\n  };\n  var historyListeners = [];\n  var historyUnListens = [];\n  if (window.g_history && _isFunction(window.g_history.listen)) {\n    rawHistoryListen = window.g_history.listen.bind(window.g_history);\n    window.g_history.listen = function (listener) {\n      historyListeners.push(listener);\n      var unListen = rawHistoryListen(listener);\n      historyUnListens.push(unListen);\n      return function () {\n        unListen();\n        historyUnListens.splice(historyUnListens.indexOf(unListen), 1);\n        historyListeners.splice(historyListeners.indexOf(listener), 1);\n      };\n    };\n  }\n  return function free() {\n    var rebuild = _noop;\n    /*\n     还存在余量 listener 表明未被卸载，存在两种情况\n     1. 应用在 unmout 时未正确卸载 listener\n     2. listener 是应用 mount 之前绑定的，\n     第二种情况下应用在下次 mount 之前需重新绑定该 listener\n     */\n    if (historyListeners.length) {\n      rebuild = function rebuild() {\n        // 必须使用 window.g_history.listen 的方式重新绑定 listener，从而能保证 rebuild 这部分也能被捕获到，否则在应用卸载后无法正确的移除这部分副作用\n        historyListeners.forEach(function (listener) {\n          return window.g_history.listen(listener);\n        });\n      };\n    }\n    // 卸载余下的 listener\n    historyUnListens.forEach(function (unListen) {\n      return unListen();\n    });\n    // restore\n    if (window.g_history && _isFunction(window.g_history.listen)) {\n      window.g_history.listen = rawHistoryListen;\n    }\n    return rebuild;\n  };\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,KAAK,MAAM,aAAa;AAC/B;AACA;AACA;AACA;AACA,eAAe,SAASC,KAAKA,CAAA,EAAG;EAC9B;EACA;EACA,IAAIC,gBAAgB,GAAG,SAASA,gBAAgBA,CAACC,CAAC,EAAE;IAClD,OAAOH,KAAK;EACd,CAAC;EACD,IAAII,gBAAgB,GAAG,EAAE;EACzB,IAAIC,gBAAgB,GAAG,EAAE;EACzB,IAAIC,MAAM,CAACC,SAAS,IAAIR,WAAW,CAACO,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE;IAC5DN,gBAAgB,GAAGI,MAAM,CAACC,SAAS,CAACC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACC,SAAS,CAAC;IACjED,MAAM,CAACC,SAAS,CAACC,MAAM,GAAG,UAAUE,QAAQ,EAAE;MAC5CN,gBAAgB,CAACO,IAAI,CAACD,QAAQ,CAAC;MAC/B,IAAIE,QAAQ,GAAGV,gBAAgB,CAACQ,QAAQ,CAAC;MACzCL,gBAAgB,CAACM,IAAI,CAACC,QAAQ,CAAC;MAC/B,OAAO,YAAY;QACjBA,QAAQ,CAAC,CAAC;QACVP,gBAAgB,CAACQ,MAAM,CAACR,gBAAgB,CAACS,OAAO,CAACF,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC9DR,gBAAgB,CAACS,MAAM,CAACT,gBAAgB,CAACU,OAAO,CAACJ,QAAQ,CAAC,EAAE,CAAC,CAAC;MAChE,CAAC;IACH,CAAC;EACH;EACA,OAAO,SAASK,IAAIA,CAAA,EAAG;IACrB,IAAIC,OAAO,GAAGhB,KAAK;IACnB;AACJ;AACA;AACA;AACA;AACA;IACI,IAAII,gBAAgB,CAACa,MAAM,EAAE;MAC3BD,OAAO,GAAG,SAASA,OAAOA,CAAA,EAAG;QAC3B;QACAZ,gBAAgB,CAACc,OAAO,CAAC,UAAUR,QAAQ,EAAE;UAC3C,OAAOJ,MAAM,CAACC,SAAS,CAACC,MAAM,CAACE,QAAQ,CAAC;QAC1C,CAAC,CAAC;MACJ,CAAC;IACH;IACA;IACAL,gBAAgB,CAACa,OAAO,CAAC,UAAUN,QAAQ,EAAE;MAC3C,OAAOA,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC;IACF;IACA,IAAIN,MAAM,CAACC,SAAS,IAAIR,WAAW,CAACO,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE;MAC5DF,MAAM,CAACC,SAAS,CAACC,MAAM,GAAGN,gBAAgB;IAC5C;IACA,OAAOc,OAAO;EAChB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}