{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _cloneDeep from \"lodash/cloneDeep\";\n/**\n * @author dbkillerf6\n * @since 2020-04-10\n */\nvar globalState = {};\nvar deps = {};\n// 触发全局监听\nfunction emitGlobal(state, prevState) {\n  Object.keys(deps).forEach(function (id) {\n    if (deps[id] instanceof Function) {\n      deps[id](_cloneDeep(state), _cloneDeep(prevState));\n    }\n  });\n}\nexport function initGlobalState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(\"[qiankun] globalState tools will be removed in 3.0, pls don't use it!\");\n  }\n  if (state === globalState) {\n    console.warn('[qiankun] state has not changed！');\n  } else {\n    var prevGlobalState = _cloneDeep(globalState);\n    globalState = _cloneDeep(state);\n    emitGlobal(globalState, prevGlobalState);\n  }\n  return getMicroAppStateActions(\"global-\".concat(+new Date()), true);\n}\nexport function getMicroAppStateActions(id, isMaster) {\n  return {\n    /**\n     * onGlobalStateChange 全局依赖监听\n     *\n     * 收集 setState 时所需要触发的依赖\n     *\n     * 限制条件：每个子应用只有一个激活状态的全局监听，新监听覆盖旧监听，若只是监听部分属性，请使用 onGlobalStateChange\n     *\n     * 这么设计是为了减少全局监听滥用导致的内存爆炸\n     *\n     * 依赖数据结构为：\n     * {\n     *   {id}: callback\n     * }\n     *\n     * @param callback\n     * @param fireImmediately\n     */\n    onGlobalStateChange: function onGlobalStateChange(callback, fireImmediately) {\n      if (!(callback instanceof Function)) {\n        console.error('[qiankun] callback must be function!');\n        return;\n      }\n      if (deps[id]) {\n        console.warn(\"[qiankun] '\".concat(id, \"' global listener already exists before this, new listener will overwrite it.\"));\n      }\n      deps[id] = callback;\n      if (fireImmediately) {\n        var cloneState = _cloneDeep(globalState);\n        callback(cloneState, cloneState);\n      }\n    },\n    /**\n     * setGlobalState 更新 store 数据\n     *\n     * 1. 对输入 state 的第一层属性做校验，只有初始化时声明过的第一层（bucket）属性才会被更改\n     * 2. 修改 store 并触发全局监听\n     *\n     * @param state\n     */\n    setGlobalState: function setGlobalState() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (state === globalState) {\n        console.warn('[qiankun] state has not changed！');\n        return false;\n      }\n      var changeKeys = [];\n      var prevGlobalState = _cloneDeep(globalState);\n      globalState = _cloneDeep(Object.keys(state).reduce(function (_globalState, changeKey) {\n        if (isMaster || _globalState.hasOwnProperty(changeKey)) {\n          changeKeys.push(changeKey);\n          return Object.assign(_globalState, _defineProperty({}, changeKey, state[changeKey]));\n        }\n        console.warn(\"[qiankun] '\".concat(changeKey, \"' not declared when init state\\uFF01\"));\n        return _globalState;\n      }, globalState));\n      if (changeKeys.length === 0) {\n        console.warn('[qiankun] state has not changed！');\n        return false;\n      }\n      emitGlobal(globalState, prevGlobalState);\n      return true;\n    },\n    // 注销该应用下的依赖\n    offGlobalStateChange: function offGlobalStateChange() {\n      delete deps[id];\n      return true;\n    }\n  };\n}","map":{"version":3,"names":["_defineProperty","_cloneDeep","globalState","deps","emitGlobal","state","prevState","Object","keys","forEach","id","Function","initGlobalState","arguments","length","undefined","process","env","NODE_ENV","console","warn","prevGlobalState","getMicroAppStateActions","concat","Date","isMaster","onGlobalStateChange","callback","fireImmediately","error","cloneState","setGlobalState","changeKeys","reduce","_globalState","changeKey","hasOwnProperty","push","assign","offGlobalStateChange"],"sources":["/home/lishu/桌面/Micro_frontend_practice/qiankun_micro/qiankun-base/node_modules/qiankun/es/globalState.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _cloneDeep from \"lodash/cloneDeep\";\n/**\n * @author dbkillerf6\n * @since 2020-04-10\n */\nvar globalState = {};\nvar deps = {};\n// 触发全局监听\nfunction emitGlobal(state, prevState) {\n  Object.keys(deps).forEach(function (id) {\n    if (deps[id] instanceof Function) {\n      deps[id](_cloneDeep(state), _cloneDeep(prevState));\n    }\n  });\n}\nexport function initGlobalState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(\"[qiankun] globalState tools will be removed in 3.0, pls don't use it!\");\n  }\n  if (state === globalState) {\n    console.warn('[qiankun] state has not changed！');\n  } else {\n    var prevGlobalState = _cloneDeep(globalState);\n    globalState = _cloneDeep(state);\n    emitGlobal(globalState, prevGlobalState);\n  }\n  return getMicroAppStateActions(\"global-\".concat(+new Date()), true);\n}\nexport function getMicroAppStateActions(id, isMaster) {\n  return {\n    /**\n     * onGlobalStateChange 全局依赖监听\n     *\n     * 收集 setState 时所需要触发的依赖\n     *\n     * 限制条件：每个子应用只有一个激活状态的全局监听，新监听覆盖旧监听，若只是监听部分属性，请使用 onGlobalStateChange\n     *\n     * 这么设计是为了减少全局监听滥用导致的内存爆炸\n     *\n     * 依赖数据结构为：\n     * {\n     *   {id}: callback\n     * }\n     *\n     * @param callback\n     * @param fireImmediately\n     */\n    onGlobalStateChange: function onGlobalStateChange(callback, fireImmediately) {\n      if (!(callback instanceof Function)) {\n        console.error('[qiankun] callback must be function!');\n        return;\n      }\n      if (deps[id]) {\n        console.warn(\"[qiankun] '\".concat(id, \"' global listener already exists before this, new listener will overwrite it.\"));\n      }\n      deps[id] = callback;\n      if (fireImmediately) {\n        var cloneState = _cloneDeep(globalState);\n        callback(cloneState, cloneState);\n      }\n    },\n    /**\n     * setGlobalState 更新 store 数据\n     *\n     * 1. 对输入 state 的第一层属性做校验，只有初始化时声明过的第一层（bucket）属性才会被更改\n     * 2. 修改 store 并触发全局监听\n     *\n     * @param state\n     */\n    setGlobalState: function setGlobalState() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (state === globalState) {\n        console.warn('[qiankun] state has not changed！');\n        return false;\n      }\n      var changeKeys = [];\n      var prevGlobalState = _cloneDeep(globalState);\n      globalState = _cloneDeep(Object.keys(state).reduce(function (_globalState, changeKey) {\n        if (isMaster || _globalState.hasOwnProperty(changeKey)) {\n          changeKeys.push(changeKey);\n          return Object.assign(_globalState, _defineProperty({}, changeKey, state[changeKey]));\n        }\n        console.warn(\"[qiankun] '\".concat(changeKey, \"' not declared when init state\\uFF01\"));\n        return _globalState;\n      }, globalState));\n      if (changeKeys.length === 0) {\n        console.warn('[qiankun] state has not changed！');\n        return false;\n      }\n      emitGlobal(globalState, prevGlobalState);\n      return true;\n    },\n    // 注销该应用下的依赖\n    offGlobalStateChange: function offGlobalStateChange() {\n      delete deps[id];\n      return true;\n    }\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}