{"ast":null,"code":"var _jsxFileName = \"/home/lishu/\\u684C\\u9762/Micro_frontend_practice/qiankun_micro/qiankun-micro-app1/src/pages/Detail/index.tsx\";\nimport React from 'react';\nimport { Table } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// @ts-ignore\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  filters: [{\n    text: 'Joe',\n    value: 'Joe'\n  }, {\n    text: 'Jim',\n    value: 'Jim'\n  }, {\n    text: 'Submenu',\n    value: 'Submenu',\n    children: [{\n      text: 'Green',\n      value: 'Green'\n    }, {\n      text: 'Black',\n      value: 'Black'\n    }]\n  }],\n  // specify the condition of filtering result\n  // here is that finding the name started with `value`\n  onFilter: (value, record) => record.name.indexOf(value) === 0,\n  sorter: (a, b) => a.name.length - b.name.length,\n  sortDirections: ['descend']\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  defaultSortOrder: 'descend',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  filters: [{\n    text: 'London',\n    value: 'London'\n  }, {\n    text: 'New York',\n    value: 'New York'\n  }],\n  onFilter: (value, record) => record.address.indexOf(value) === 0\n}];\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park'\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park'\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sydney No. 1 Lake Park'\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park'\n}];\nconst onChange = (pagination, filters, sorter, extra) => {\n  console.log('params', pagination, filters, sorter, extra);\n};\nconst App = () => /*#__PURE__*/_jsxDEV(Table, {\n  columns: columns,\n  dataSource: data,\n  onChange: onChange\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 101,\n  columnNumber: 29\n}, this);\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","columns","title","dataIndex","filters","text","value","children","onFilter","record","name","indexOf","sorter","a","b","length","sortDirections","defaultSortOrder","age","address","data","key","onChange","pagination","extra","console","log","App","dataSource","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lishu/桌面/Micro_frontend_practice/qiankun_micro/qiankun-micro-app1/src/pages/Detail/index.tsx"],"sourcesContent":["import React from 'react';\nimport { Table } from 'antd';\nimport type { ColumnsType, TableProps } from 'antd/es/table';\n\ninterface DataType {\n    key: React.Key;\n    name: string;\n    age: number;\n    address: string;\n}\n\n// @ts-ignore\nconst columns: ColumnsType<DataType> = [\n    {\n        title: 'Name',\n        dataIndex: 'name',\n        filters: [\n            {\n                text: 'Joe',\n                value: 'Joe',\n            },\n            {\n                text: 'Jim',\n                value: 'Jim',\n            },\n            {\n                text: 'Submenu',\n                value: 'Submenu',\n                children: [\n                    {\n                        text: 'Green',\n                        value: 'Green',\n                    },\n                    {\n                        text: 'Black',\n                        value: 'Black',\n                    },\n                ],\n            },\n        ],\n        // specify the condition of filtering result\n        // here is that finding the name started with `value`\n        onFilter: (value: string, record) => record.name.indexOf(value) === 0,\n        sorter: (a, b) => a.name.length - b.name.length,\n        sortDirections: ['descend'],\n    },\n    {\n        title: 'Age',\n        dataIndex: 'age',\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => a.age - b.age,\n    },\n    {\n        title: 'Address',\n        dataIndex: 'address',\n        filters: [\n            {\n                text: 'London',\n                value: 'London',\n            },\n            {\n                text: 'New York',\n                value: 'New York',\n            },\n        ],\n        onFilter: (value: string, record) => record.address.indexOf(value) === 0,\n    },\n];\n\nconst data = [\n    {\n        key: '1',\n        name: 'John Brown',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n    },\n    {\n        key: '2',\n        name: 'Jim Green',\n        age: 42,\n        address: 'London No. 1 Lake Park',\n    },\n    {\n        key: '3',\n        name: 'Joe Black',\n        age: 32,\n        address: 'Sydney No. 1 Lake Park',\n    },\n    {\n        key: '4',\n        name: 'Jim Red',\n        age: 32,\n        address: 'London No. 2 Lake Park',\n    },\n];\n\nconst onChange: TableProps<DataType>['onChange'] = (pagination, filters, sorter, extra) => {\n    console.log('params', pagination, filters, sorter, extra);\n};\n\nconst App: React.FC = () => <Table columns={columns} dataSource={data} onChange={onChange} />;\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU7B;AACA,MAAMC,OAA8B,GAAG,CACnC;EACIC,KAAK,EAAE,MAAM;EACbC,SAAS,EAAE,MAAM;EACjBC,OAAO,EAAE,CACL;IACIC,IAAI,EAAE,KAAK;IACXC,KAAK,EAAE;EACX,CAAC,EACD;IACID,IAAI,EAAE,KAAK;IACXC,KAAK,EAAE;EACX,CAAC,EACD;IACID,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,SAAS;IAChBC,QAAQ,EAAE,CACN;MACIF,IAAI,EAAE,OAAO;MACbC,KAAK,EAAE;IACX,CAAC,EACD;MACID,IAAI,EAAE,OAAO;MACbC,KAAK,EAAE;IACX,CAAC;EAET,CAAC,CACJ;EACD;EACA;EACAE,QAAQ,EAAEA,CAACF,KAAa,EAAEG,MAAM,KAAKA,MAAM,CAACC,IAAI,CAACC,OAAO,CAACL,KAAK,CAAC,KAAK,CAAC;EACrEM,MAAM,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACH,IAAI,CAACK,MAAM,GAAGD,CAAC,CAACJ,IAAI,CAACK,MAAM;EAC/CC,cAAc,EAAE,CAAC,SAAS;AAC9B,CAAC,EACD;EACId,KAAK,EAAE,KAAK;EACZC,SAAS,EAAE,KAAK;EAChBc,gBAAgB,EAAE,SAAS;EAC3BL,MAAM,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACK,GAAG,GAAGJ,CAAC,CAACI;AAChC,CAAC,EACD;EACIhB,KAAK,EAAE,SAAS;EAChBC,SAAS,EAAE,SAAS;EACpBC,OAAO,EAAE,CACL;IACIC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAE;EACX,CAAC,EACD;IACID,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE;EACX,CAAC,CACJ;EACDE,QAAQ,EAAEA,CAACF,KAAa,EAAEG,MAAM,KAAKA,MAAM,CAACU,OAAO,CAACR,OAAO,CAACL,KAAK,CAAC,KAAK;AAC3E,CAAC,CACJ;AAED,MAAMc,IAAI,GAAG,CACT;EACIC,GAAG,EAAE,GAAG;EACRX,IAAI,EAAE,YAAY;EAClBQ,GAAG,EAAE,EAAE;EACPC,OAAO,EAAE;AACb,CAAC,EACD;EACIE,GAAG,EAAE,GAAG;EACRX,IAAI,EAAE,WAAW;EACjBQ,GAAG,EAAE,EAAE;EACPC,OAAO,EAAE;AACb,CAAC,EACD;EACIE,GAAG,EAAE,GAAG;EACRX,IAAI,EAAE,WAAW;EACjBQ,GAAG,EAAE,EAAE;EACPC,OAAO,EAAE;AACb,CAAC,EACD;EACIE,GAAG,EAAE,GAAG;EACRX,IAAI,EAAE,SAAS;EACfQ,GAAG,EAAE,EAAE;EACPC,OAAO,EAAE;AACb,CAAC,CACJ;AAED,MAAMG,QAA0C,GAAGA,CAACC,UAAU,EAAEnB,OAAO,EAAEQ,MAAM,EAAEY,KAAK,KAAK;EACvFC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,UAAU,EAAEnB,OAAO,EAAEQ,MAAM,EAAEY,KAAK,CAAC;AAC7D,CAAC;AAED,MAAMG,GAAa,GAAGA,CAAA,kBAAM3B,OAAA,CAACF,KAAK;EAACG,OAAO,EAAEA,OAAQ;EAAC2B,UAAU,EAAER,IAAK;EAACE,QAAQ,EAAEA;AAAS;EAAAO,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC;AAACC,EAAA,GAAxFN,GAAa;AAEnB,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}